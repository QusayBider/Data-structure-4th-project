#include <stdio.h>
#include <stdlib.h>
#include<string.h>
#define  max 50
///////////////////////////////////////////////////////////////////////////////////
struct Node{
    int distance;
    char vertex_string[max];
    struct Node*next;
};
struct List{
    struct Node *head;
    char vertex[];
};
/*struct MinHeap {
    int maxsize;
    char Heap [];
}heap;*/
struct Prerequisites{
    char vertex_string[max];
    struct NodeCourse*next;
};
struct ListCourse{
    char course[max];
    struct ListCourse*next;
    int visit;
    int indegree;
    struct Prerequisites* prerq;
};
struct queue{
    char course[max];
    struct queue *next;
};
///////////////////////////////////////////////////////////////////////////////////
void Menu();
void loadData();
void addNode(char s[],char s2[],int);
void printList();
//void MinHeap(int maxsize);
//int parent (int postion);
//int Left_Child(int postion);
//int RightChild(int postion);
//int isLeafNode(int postion);
//void addEdge();
void addCourse(char course[]);
void addPrerequisites(char course[] ,char Prerequisites_course[]);
void enqueue(struct ListCourse*);
void dequeue();
//void printCourses();
void topologicalSort();
void printCourseGraph();
void printSortedCourse();
///////////////////////////////////////////////////////////////////////////////////
int option;
int sizeOfNode=1000;
//int FRONT=1;
//int Index=0;
struct queue *front=NULL;
struct queue *rear=NULL;
//struct MinHeap heap;
struct List *adjList[1000];
struct ListCourse *list_course;
struct ListCourse *list_sorted;
///////////////////////////////////////////////////////////////////////////////////
int main(void) {
    for (int i = 0; i < sizeOfNode; i++) {
        adjList[i] = (struct List *)malloc(sizeof(struct List));
        strcpy(adjList[i]->vertex , "");  // Initialize vertex as an empty string
        adjList[i]->head = NULL;
    }
    Menu();
    scanf("%d", &option);
    do {
        switch (option) {
            case 1:
                loadData();
                break;
            case 2: {
                 printList() ;
            }
                break;
            case 3:
                break;
            case 4:topologicalSort();
                break;
            case 5:printSortedCourse();
                break;
            case 6:{
                printCourseGraph();
            }
                break;
            case 7: exit(0);
            default:
                printf("The option is not valid.\n");
        }
        Menu();
        scanf("%d", &option);
    } while (option != 7);
    return 0;
}

void loadData() {
    FILE *in,*input;
    char Temp_InputData[1000000];
    in = fopen("input_buildings.txt", "r");
    input=fopen("input_courses.txt", "r");
    if (in == NULL) {
        printf("Error! can't open the file\n");
        return;
    }
    while (fgets(Temp_InputData, sizeof(Temp_InputData), in) != NULL) {
        Temp_InputData[strcspn(Temp_InputData, "\n")] = '\0';
        char *s = strtok(Temp_InputData, "#");
        char *s2 = strtok(NULL, "#");
        int distance = atoi(strtok(NULL, "#"));
        addNode(s, s2, distance);
    }
    if (input == NULL) {
        printf("Error! can't open the file\n");
        return;
    }
    while (fgets(Temp_InputData, sizeof(Temp_InputData), input) != NULL) {
        char *s = strtok(Temp_InputData, "#");
        if(s[0]!='\n')
        addCourse(s);

        char *s2 = strtok(NULL, "#");
        if(s2==NULL||s2[0]=='\n')
            continue;
        do {
            s2[strcspn(s2, "\n")] = '\0';
            addPrerequisites(s, s2);
                  s2 = strtok(NULL, "#");
        } while (s2 != NULL);

    }
    printf("The data has been loaded\n");
}
void addNode( char s[],  char s2[], int distance) {
    // Check if the source vertex already exists
      for (int i = 0; i < sizeOfNode; i++) {
          if (strcmp(adjList[i]->vertex,"")==0) {              // Check for an uninitialized list
              strcpy(adjList[i]->vertex,s);

              struct Node *Edge = (struct Node*)malloc(sizeof(struct Node));
              strcpy(Edge->vertex_string, s2);
              Edge->distance = distance;
              Edge->next = NULL;

              adjList[i]->head = Edge;
              break;
          }
        if (strcmp(adjList[i]->vertex,s)==0) {
            struct Node *Edge = (struct Node *)malloc(sizeof(struct Node));
            strcpy(Edge->vertex_string, s2) ;
            Edge->distance = distance;
            Edge->next = NULL;

            if (adjList[i]->head == NULL) {
                adjList[i]->head = Edge;
            } else {
                struct Node *Temp = adjList[i]->head;
                while (Temp->next != NULL)
                    Temp = Temp->next;
                Temp->next = Edge;
            }
            break;
        }
      }
}
void printList() {
    for (int i = 0; i < sizeOfNode; i++) {
        if (strcmp(adjList[i]->vertex , "")!=0) {
            printf("Adjacency list for vertex %s:\n", adjList[i]->vertex);
            struct Node *p = adjList[i]->head;
            while (p) {
                printf("  -> %s (Distance: %d)\n", p->vertex_string, p->distance);
                p = p->next;
            }
        }
    }
}
/*void MinHeap(int maxsize){
    heap.maxsize = maxsize;
    char Heap [maxsize + 1];
   strcpy( &Heap[0], "") ;
}
int parent (int postion){
    return postion/2;
}
int Left_Child(int postion){
    return(2*postion);
}
int RightChild(int postion){
    return (2*postion)+1;
}
int isLeafNode(int postion){
    if(postion>=(Index/2)&&postion<=Index){
        return  1;
    }
    return 0;
}*/
/*void swap(int fpostion,int spotion){
    char temp[max];
    strcpy(temp,&heap.Heap[fpostion]);
    strcpy(&heap.Heap[fpostion],&heap.Heap[spotion]);
    strcpy(&heap.Heap[spotion],temp);
}
void insert_to_heap(char element[]){
    if(Index>=heap.maxsize)
        return;
    strcpy(&heap.Heap[++Index],element);
    int current=Index;
    while (strcmp(&heap.Heap[current],&heap.Heap[parent(current)])<0){
        swap(current, parent(current));
        current= parent(current);
    }
}*/
/*void mainHeapify(int postion){
    if(!isLeafNode(postion)){
        if(strcmp(&heap.Heap[postion],&heap.Heap[Left_Child(postion)])>0||heap.Heap[postion])
    }
}*/
void addCourse(char course[]) {
    struct ListCourse *newcourse = (struct ListCourse *) malloc(sizeof(struct ListCourse));
    strcpy(newcourse->course, course);
    newcourse->prerq = NULL;
    newcourse->next = NULL;
    newcourse->indegree = 0;
    newcourse->visit = 0;

    if (list_course == NULL) {            // If the list is empty, set the new course as the head of the list
        list_course = newcourse;
    } else {                             // Otherwise, find the end of the list and add the new course there
        struct ListCourse *current = list_course;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newcourse;
    }
}
void addPrerequisites(char course[], char Prerequisites_course[]) {
    struct Prerequisites *newPrerequisites = (struct Prerequisites *) malloc(sizeof(struct Prerequisites));
    strcpy(newPrerequisites->vertex_string, Prerequisites_course);
    newPrerequisites->next = NULL;

    // Find the course in the list
    struct ListCourse *currentCourse = list_course;
    while (currentCourse != NULL && strcmp(currentCourse->course, course) != 0) {
        currentCourse = currentCourse->next;
    }
    if (currentCourse->prerq == NULL) {                                                                   // Add the new prerequisite to the course
        currentCourse->prerq = newPrerequisites;
    } else {
        struct Prerequisites *currentPrereq = currentCourse->prerq;
        while (currentPrereq->next != NULL) {
            currentPrereq = (struct Prerequisites *) currentPrereq->next;
        }
        currentPrereq->next = (struct NodeCourse *) newPrerequisites;
    }
    currentCourse->indegree++;
}
void printCourseGraph(){
   while (list_course!=NULL){
        printf("%s %d:",list_course->course,list_course->indegree);
        while (list_course->prerq!=NULL){
            printf("-> %s",list_course->prerq->vertex_string);
            list_course->prerq= (struct Prerequisites *) list_course->prerq->next;
        }
        printf("\n");
        list_course=list_course->next;
    }
}
void printSortedCourse(){
    while (list_sorted!=NULL) {
        printf("%s->",list_sorted->course);
        list_sorted=list_sorted->next;
    }
}
void enqueue(struct ListCourse* course ){
    struct queue* new_queue = (struct queue*)malloc(sizeof(struct queue));
    strcpy(new_queue->course,course->course);
    new_queue->next = NULL;
    if (front == NULL && rear == NULL) {
        front = rear = new_queue;
        return;
    }
    rear->next=new_queue;
    rear = rear->next;
}
void dequeue() {
    if (front == NULL) {
        printf("Queue is empty\n");
    } else {
            struct ListCourse *Temp2Course = list_course;
                while (Temp2Course != NULL) {
                    struct Prerequisites *currentPrereq = Temp2Course->prerq;
                    while (currentPrereq != NULL) {
                        if (strcasecmp(currentPrereq->vertex_string, front->course) == 0) {
                            Temp2Course->indegree--;
                        }
                        currentPrereq = (struct Prerequisites *) currentPrereq->next;
                    }
                    Temp2Course = Temp2Course->next;
                }

        // Create a new node for the sorted list
        struct ListCourse *NewNode = (struct ListCourse*) malloc(sizeof(struct ListCourse));
        strcpy(NewNode->course, front->course);
        NewNode->next = NULL;
        NewNode->prerq = NULL;

        // Add the new node to the end of list_sorted
        if (list_sorted == NULL) {
            list_sorted = NewNode;
        } else {
            struct ListCourse *current = list_sorted;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = NewNode;
        }
        // Move front to the next node
        struct QueueNode *temp = (struct QueueNode *) front;
        front = front->next;
        free(temp);
    }
}
void topologicalSort(){
    struct ListCourse *current=list_course;
    while(current!=NULL){
        if(current->indegree==0){
            if(current->visit==0){
                enqueue(current);
                current->visit=1;
            }
        }
        current=current->next;
    }
    while (front!=NULL){
        dequeue();
        struct ListCourse *Temp=list_course;
        while (Temp!=NULL){
            if(Temp->indegree==0){
                if(Temp->visit==0){
                    enqueue(Temp);
                    Temp->visit=1;
                }
            }
            Temp=Temp->next;
        }
    }
    printf("The Topological Sort Done\n");
}
void Menu() {
    printf("\n1. Load the two files."
           "\n2. Calculate the shortest distance between two buildings."
           "\n3. Print the shortest route between two buildings and the total distance."
           "\n4. Sort the courses using the topological sort."
           "\n5. Print the sorted courses."
           "\n6. Print the Graph courses."
           "\n7. Exit the application.\n Please enter your option :\n");
}