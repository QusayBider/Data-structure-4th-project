#include <stdio.h>
#include <stdlib.h>
#include<string.h>
#define  max 50
#define MAX_COLLEGES 100
///////////////////////////////////////////////////////////////////////////////////
typedef struct {
    char name[max];
    int distance;
} Edge;

typedef struct {
    char name[max];
    Edge edges[MAX_COLLEGES];
    int edgeCount;
} College;

College colleges[MAX_COLLEGES];
int collegeCount = 0;

struct Node{
    int distance;
    char vertex_string[max];
    struct Node*next;
};
struct List{
    struct Node *head;
    char vertex[];
};
struct MinHeap {
    int Index;
    int maxsize;
    char Heap[MAX_COLLEGES][max] ;
    int distances[max];
};
struct Prerequisites{
    char vertex_string[max];
    struct NodeCourse*next;
};
struct ListCourse{
    char course[max];
    struct ListCourse*next;
    int visit;
    int indegree;
    struct Prerequisites* prerq;
};
struct queue{
    char course[max];
    struct queue *next;
};

///////////////////////////////////////////////////////////////////////////////////
void Menu();
void loadData();
void printList();
void MinHeap_init(int maxsize);
void insert(char element[],int distance);
int parent (int);
int Left_Child(int);
int RightChild(int);
int isLeafNode(int);
char *extractMin();
void addCourse(char course[]);
void addPrerequisites(char course[] ,char Prerequisites_course[]);
void enqueue(struct ListCourse*);
void dequeue();
void topologicalSort();
void printCourseGraph();
void printSortedCourse();
College *findCollege(char *name);
College *addCollege(char *name);
void addEdge(char *from, char *to, int distance);
void dijkstra(char *start, char *end);
///////////////////////////////////////////////////////////////////////////////////
int option;
int sizeOfNode=1000;
struct queue *front=NULL;
struct queue *rear=NULL;
struct MinHeap heap;
struct List *adjList[1000];
struct ListCourse *list_course;
struct ListCourse *list_sorted;
College colleges[MAX_COLLEGES];
///////////////////////////////////////////////////////////////////////////////////
int main(void) {
    for (int i = 0; i < sizeOfNode; i++) {
        adjList[i] = (struct List *)malloc(sizeof(struct List));
        strcpy(adjList[i]->vertex , "");  // Initialize vertex as an empty string
        adjList[i]->head = NULL;
    }
    Menu();
    scanf("%d", &option);
    do {
        switch (option) {
            case 1:
                loadData();
                break;
            case 2: {
                 printList() ;
            }
                break;
            case 3:{
                char start[max];
                char end[max] ;
                printf("Enter the start distinction\n");
                scanf("%s",start);
                printf("Enter the end distinction\n");
                scanf("%s",end);
                dijkstra(start,end);
            }
                break;
            case 4:topologicalSort();
                break;
            case 5:printSortedCourse();
                break;
            case 6:{
                printCourseGraph();
            }
                break;
            case 7: exit(0);
            default:
                printf("The option is not valid.\n");
        }
        Menu();
        scanf("%d", &option);
    } while (option != 7);
    return 0;
}

void loadData() {
    FILE *in,*input;
    char Temp_InputData[1000000];
    in = fopen("input_buildings.txt", "r");
    input=fopen("input_courses.txt", "r");
    if (in == NULL) {
        printf("Error! can't open the file\n");
        return;
    }
    while (fgets(Temp_InputData, sizeof(Temp_InputData), in) != NULL) {
        Temp_InputData[strcspn(Temp_InputData, "\n")] = '\0';
        char *s = strtok(Temp_InputData, "#");
        char *s2 = strtok(NULL, "#");
        int distance = atoi(strtok(NULL, "#"));
        //addNode(s, s2, distance);
        addEdge(s, s2, distance);
    }
    if (input == NULL) {
        printf("Error! can't open the file\n");
        return;
    }
    while (fgets(Temp_InputData, sizeof(Temp_InputData), input) != NULL) {
        char *s = strtok(Temp_InputData, "#");
        if(s[0]!='\n')
        addCourse(s);

        char *s2 = strtok(NULL, "#");
        if(s2==NULL||s2[0]=='\n')
            continue;
        do {
            s2[strcspn(s2, "\n")] = '\0';
            addPrerequisites(s, s2);
                  s2 = strtok(NULL, "#");
        } while (s2 != NULL);

    }
    printf("The data has been loaded\n");
}
void printList() {
    for (int i = 0; i < sizeOfNode; i++) {
        if (strcmp(adjList[i]->vertex , "")!=0) {
            printf("Adjacency list for vertex %s:\n", adjList[i]->vertex);
            struct Node *p = adjList[i]->head;
            while (p) {
                printf("  -> %s (Distance: %d)\n", p->vertex_string, p->distance);
                p = p->next;
            }
        }
    }
}
void MinHeap_init(int maxsize) {
    heap.maxsize = maxsize;
    heap.Index = 0;
    for (int i = 0; i < maxsize; i++) {
        strcpy(heap.Heap[i], "");
    }
}

// Helper function to return the parent of a node
int parent(int position) {
    return position / 2;
}

// Helper function to return the left child of a node
int Left_Child(int position) {
    return 2 * position;
}

// Helper function to return the right child of a node
int RightChild(int position) {
    return (2 * position) + 1;
}

// Helper function to check if a node is a leaf
int isLeafNode(int position) {
    return (position >= (heap.Index / 2) && position <= heap.Index);
}

// Helper function to swap two nodes
void swap(int fposition, int sposition) {
    char tempStr[max];
    int tempDist;

    strcpy(tempStr, heap.Heap[fposition]);
    tempDist = heap.distances[fposition];

    strcpy(heap.Heap[fposition], heap.Heap[sposition]);
    heap.distances[fposition] = heap.distances[sposition];

    strcpy(heap.Heap[sposition], tempStr);
    heap.distances[sposition] = tempDist;
}

// Function to insert an element into the heap
void insert(char element[], int distance) {
    if (heap.Index >= heap.maxsize) {
        return;
    }
    heap.Index++;
    strcpy(heap.Heap[heap.Index], element);
    heap.distances[heap.Index] = distance;

    int current = heap.Index;
    while (current > 1 && heap.distances[current] < heap.distances[parent(current)]) {
        swap(current, parent(current));
        current = parent(current);
    }
}


// Function to heapify the node at position
void mainHeapify(int position) {
    if (!isLeafNode(position)) {
        int left = Left_Child(position);
        int right = RightChild(position);
        int smallest = position;

        if (left <= heap.Index && heap.distances[left] < heap.distances[smallest]) {
            smallest = left;
        }
        if (right <= heap.Index && heap.distances[right] < heap.distances[smallest]) {
            smallest = right;
        }

        if (smallest != position) {
            swap(position, smallest);
            mainHeapify(smallest);
        }
    }
}

// Function to extract the minimum element from the heap
char *extractMin() {
    if (heap.Index == 0) {
        return NULL;
    }
    static char minElement[max];
    strcpy(minElement, heap.Heap[1]);
    strcpy(heap.Heap[1], heap.Heap[heap.Index]);
    heap.distances[1] = heap.distances[heap.Index];
    heap.Index--;
    mainHeapify(1);
    return minElement;
}

// Function to add a college
College *addCollege(char *name) {
    strcpy(colleges[collegeCount].name, name);
    colleges[collegeCount].edgeCount = 0;
    return &colleges[collegeCount++];
}

// Function to find a college by name
College *findCollege(char *name) {
    for (int i = 0; i < collegeCount; i++) {
        if (strcmp(colleges[i].name, name) == 0) {
            return &colleges[i];
        }
    }
    return NULL;
}

// Function to add an edge between two colleges
void addEdge(char *from, char *to, int distance) {
    College *fromCollege = findCollege(from);
    if (fromCollege == NULL) {
        fromCollege = addCollege(from);
    }

    College *toCollege = findCollege(to);
    if (toCollege == NULL) {
        toCollege = addCollege(to);
    }

    Edge *edge = &fromCollege->edges[fromCollege->edgeCount++];
    strcpy(edge->name, to);
    edge->distance = distance;
}

// Function to implement Dijkstra's algorithm to find the shortest path
void dijkstra(char *start, char *end) {
    MinHeap_initialize(MAX_COLLEGES);
    int distances[MAX_COLLEGES];
    int visited[MAX_COLLEGES] = {0};
    int prev[MAX_COLLEGES];

    for (int i = 0; i < MAX_COLLEGES; i++) {
        distances[i] = INT_MAX;
        prev[i] = -1;
    }

    College *startCollege = findCollege(start);
    if (startCollege == NULL) {
        printf("Start college not found.\n");
        return;
    }

    distances[startCollege - colleges] = 0;
    insert(start, 0);

    while (heap.Index > 0) {
        char *currentName = minimum_element_inheap();
        College *currentCollege = findCollege(currentName);
        int currentIndex = currentCollege - colleges;

        if (visited[currentIndex]) {
            continue;
        }
        visited[currentIndex] = 1;

        if (strcmp(currentName, end) == 0) {
            break;
        }

        for (int i = 0; i < currentCollege->edgeCount; i++) {
            Edge *edge = &currentCollege->edges[i];
            College *neighborCollege = findCollege(edge->name);
            int neighborIndex = neighborCollege - colleges;

            if (!visited[neighborIndex]) {
                int newDist = distances[currentIndex] + edge->distance;
                if (newDist < distances[neighborIndex]) {
                    distances[neighborIndex] = newDist;
                    prev[neighborIndex] = currentIndex;
                    insert_to_heap(neighborCollege->name, newDist);
                }
            }
        }
    }
    College *endCollege = findCollege(end);
    if (endCollege == NULL || distances[endCollege - colleges] == INT_MAX) {
        printf("No path found.\n");
        return;
    }

    // Print the shortest path
    char path[MAX_COLLEGES][max];
    int pathSize = 0;
    for (int at = endCollege - colleges; at != -1; at = prev[at]) {
        strcpy(path[pathSize++], colleges[at].name);
    }

    printf("Shortest path: ");
    for (int i = pathSize - 1; i >= 0; i--) {
        printf("%s", path[i]);
        if (i > 0) {
            printf(" -> ");
        }
    }
    printf("\nTotal distance: %d\n", distances[endCollege - colleges]);
}

void addCourse(char course[]) {
    struct ListCourse *newcourse = (struct ListCourse *) malloc(sizeof(struct ListCourse));
    strcpy(newcourse->course, course);
    newcourse->prerq = NULL;
    newcourse->next = NULL;
    newcourse->indegree = 0;
    newcourse->visit = 0;

    if (list_course == NULL) {            // If the list is empty, set the new course as the head of the list
        list_course = newcourse;
    } else {                             // Otherwise, find the end of the list and add the new course there
        struct ListCourse *current = list_course;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newcourse;
    }
}
void addPrerequisites(char course[], char Prerequisites_course[]) {
    struct Prerequisites *newPrerequisites = (struct Prerequisites *) malloc(sizeof(struct Prerequisites));
    strcpy(newPrerequisites->vertex_string, Prerequisites_course);
    newPrerequisites->next = NULL;

    // Find the course in the list
    struct ListCourse *currentCourse = list_course;
    while (currentCourse != NULL && strcmp(currentCourse->course, course) != 0) {
        currentCourse = currentCourse->next;
    }
    if (currentCourse->prerq == NULL) {                                                                   // Add the new prerequisite to the course
        currentCourse->prerq = newPrerequisites;
    } else {
        struct Prerequisites *currentPrereq = currentCourse->prerq;
        while (currentPrereq->next != NULL) {
            currentPrereq = (struct Prerequisites *) currentPrereq->next;
        }
        currentPrereq->next = (struct NodeCourse *) newPrerequisites;
    }
    currentCourse->indegree++;
}
void printCourseGraph(){
   while (list_course!=NULL){
        printf("%s %d:",list_course->course,list_course->indegree);
        while (list_course->prerq!=NULL){
            printf("-> %s",list_course->prerq->vertex_string);
            list_course->prerq= (struct Prerequisites *) list_course->prerq->next;
        }
        printf("\n");
        list_course=list_course->next;
    }
}
void printSortedCourse(){
    while (list_sorted!=NULL) {
        printf("%s->",list_sorted->course);
        list_sorted=list_sorted->next;
    }
}
void enqueue(struct ListCourse* course ){
    struct queue* new_queue = (struct queue*)malloc(sizeof(struct queue));
    strcpy(new_queue->course,course->course);
    new_queue->next = NULL;
    if (front == NULL && rear == NULL) {
        front = rear = new_queue;
        return;
    }
    rear->next=new_queue;
    rear = rear->next;
}
void dequeue() {
    if (front == NULL) {
        printf("Queue is empty\n");
    } else {
            struct ListCourse *Temp2Course = list_course;
                while (Temp2Course != NULL) {
                    struct Prerequisites *currentPrereq = Temp2Course->prerq;
                    while (currentPrereq != NULL) {
                        if (strcasecmp(currentPrereq->vertex_string, front->course) == 0) {
                            Temp2Course->indegree--;
                        }
                        currentPrereq = (struct Prerequisites *) currentPrereq->next;
                    }
                    Temp2Course = Temp2Course->next;
                }

        // Create a new node for the sorted list
        struct ListCourse *NewNode = (struct ListCourse*) malloc(sizeof(struct ListCourse));
        strcpy(NewNode->course, front->course);
        NewNode->next = NULL;
        NewNode->prerq = NULL;

        // Add the new node to the end of list_sorted
        if (list_sorted == NULL) {
            list_sorted = NewNode;
        } else {
            struct ListCourse *current = list_sorted;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = NewNode;
        }
        // Move front to the next node
        struct QueueNode *temp = (struct QueueNode *) front;
        front = front->next;
        free(temp);
    }
}
void topologicalSort(){
    struct ListCourse *current=list_course;
    while(current!=NULL){
        if(current->indegree==0){
            if(current->visit==0){
                enqueue(current);
                current->visit=1;
            }
        }
        current=current->next;
    }
    while (front!=NULL){
        dequeue();
        struct ListCourse *Temp=list_course;
        while (Temp!=NULL){
            if(Temp->indegree==0){
                if(Temp->visit==0){
                    enqueue(Temp);
                    Temp->visit=1;
                }
            }
            Temp=Temp->next;
        }
    }
    printf("The Topological Sort Done\n");
}
void Menu() {
    printf("\n1. Load the two files."
           "\n2. Calculate the shortest distance between two buildings."
           "\n3. Print the shortest route between two buildings and the total distance."
           "\n4. Sort the courses using the topological sort."
           "\n5. Print the sorted courses."
           "\n6. Print the Graph courses."
           "\n7. Exit the application.\n Please enter your option :\n");
}